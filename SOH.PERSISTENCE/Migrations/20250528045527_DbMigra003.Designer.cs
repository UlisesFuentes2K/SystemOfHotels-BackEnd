// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SOH.PERSISTENCE.Data;

#nullable disable

namespace SOH.PERSISTENCE.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    [Migration("20250528045527_DbMigra003")]
    partial class DbMigra003
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("SRH_Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SRH_RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SRH_UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("SRH_UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SRH_UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("SRH_UserToken", (string)null);
                });

            modelBuilder.Entity("SOH.MAIN.Models.Audit.SR_AuditLog", b =>
                {
                    b.Property<int>("idAuditLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idAuditLog"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("TableAffected")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("idRole")
                        .HasColumnType("int");

                    b.Property<int>("idUser")
                        .HasColumnType("int");

                    b.HasKey("idAuditLog");

                    b.ToTable("SRH_AuditLog");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_Binnacle", b =>
                {
                    b.Property<int>("idBinnacle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idBinnacle"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idBooking")
                        .HasColumnType("int");

                    b.Property<int>("idState")
                        .HasColumnType("int");

                    b.Property<DateTime>("insertDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("modificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idBinnacle");

                    b.HasIndex("idBooking");

                    b.HasIndex("idState");

                    b.ToTable("SRH_Binnacle");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_Booking", b =>
                {
                    b.Property<int>("idBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idBooking"));

                    b.Property<int>("SR_PersonidPerson")
                        .HasColumnType("int");

                    b.Property<int>("durationBooking")
                        .HasColumnType("int");

                    b.Property<int>("idPeriodBooking")
                        .HasColumnType("int");

                    b.Property<int>("idPerson")
                        .HasColumnType("int");

                    b.Property<int?>("idPromotion")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("idBooking");

                    b.HasIndex("SR_PersonidPerson");

                    b.HasIndex("idPeriodBooking");

                    b.ToTable("SRH_Booking");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_Calendar", b =>
                {
                    b.Property<int>("idCalendar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCalendar"));

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idCalendar");

                    b.ToTable("SRH_Calendar");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_CalendarDetail", b =>
                {
                    b.Property<int>("idBooking")
                        .HasColumnType("int");

                    b.Property<int>("idCalendar")
                        .HasColumnType("int");

                    b.HasKey("idBooking", "idCalendar");

                    b.HasIndex("idCalendar");

                    b.ToTable("SRH_CalendarDetail");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_CategoryRoom", b =>
                {
                    b.Property<int>("idCategoryRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCategoryRoom"));

                    b.Property<float>("cost")
                        .HasColumnType("real");

                    b.Property<int>("description")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCategoryRoom");

                    b.ToTable("SRH_CategoryRoom");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_PeriodBooking", b =>
                {
                    b.Property<int>("idPeriodBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPeriodBooking"));

                    b.Property<string>("period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPeriodBooking");

                    b.ToTable("SR_PeriodBooking");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_Promotion", b =>
                {
                    b.Property<int>("idPromotion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPromotion"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("concep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("value")
                        .HasColumnType("real");

                    b.HasKey("idPromotion");

                    b.ToTable("SRH_Promotion");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_Room", b =>
                {
                    b.Property<int>("idRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRoom"));

                    b.Property<int>("idCategoryRoom")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<int>("numberRoom")
                        .HasColumnType("int");

                    b.HasKey("idRoom");

                    b.HasIndex("idCategoryRoom");

                    b.ToTable("SRH_Room");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_RoomDetail", b =>
                {
                    b.Property<int>("idBooking")
                        .HasColumnType("int");

                    b.Property<int>("idRoom")
                        .HasColumnType("int");

                    b.HasKey("idBooking", "idRoom");

                    b.HasIndex("idRoom");

                    b.ToTable("SRH_RoomDetail");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_State", b =>
                {
                    b.Property<int>("idState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idState"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idState");

                    b.ToTable("SR_State");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_City", b =>
                {
                    b.Property<int>("idCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCity"));

                    b.Property<int>("idCountry")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCity");

                    b.HasIndex("idCountry");

                    b.ToTable("SRH_Cities");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_Contacts", b =>
                {
                    b.Property<int>("idContacts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idContacts"));

                    b.Property<string>("cellephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idPerson")
                        .HasColumnType("int");

                    b.Property<string>("telephoneHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephoneOffice")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idContacts");

                    b.HasIndex("idPerson");

                    b.ToTable("SRH_Contacts");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_Country", b =>
                {
                    b.Property<int>("idCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCountry"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCountry");

                    b.ToTable("SRH_Country");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_Gender", b =>
                {
                    b.Property<int>("idGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idGender"));

                    b.Property<int>("name")
                        .HasColumnType("int");

                    b.HasKey("idGender");

                    b.ToTable("SR_Gender");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_Person", b =>
                {
                    b.Property<int>("idPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPerson"));

                    b.Property<DateTime>("dateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCity")
                        .HasColumnType("int");

                    b.Property<int>("idGender")
                        .HasColumnType("int");

                    b.Property<int>("idTypeDocument")
                        .HasColumnType("int");

                    b.Property<int>("idTypePerson")
                        .HasColumnType("int");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numberDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPerson");

                    b.HasIndex("idCity");

                    b.HasIndex("idGender");

                    b.HasIndex("idTypeDocument");

                    b.HasIndex("idTypePerson");

                    b.ToTable("SRH_Person");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_TypeDocument", b =>
                {
                    b.Property<int>("idTypeDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTypeDocument"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTypeDocument");

                    b.ToTable("SR_TypeDocument");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_TypePerson", b =>
                {
                    b.Property<int>("idTypePerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTypePerson"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTypePerson");

                    b.ToTable("SRH_TypePerson");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Employee.SR_Employee", b =>
                {
                    b.Property<int>("idEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEmployee"));

                    b.Property<DateTime>("dateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("idPerson")
                        .HasColumnType("int");

                    b.Property<int>("idShift")
                        .HasColumnType("int");

                    b.Property<int>("idTypeEmployee")
                        .HasColumnType("int");

                    b.HasKey("idEmployee");

                    b.HasIndex("idPerson")
                        .IsUnique();

                    b.HasIndex("idShift");

                    b.HasIndex("idTypeEmployee");

                    b.ToTable("SRH_Employee");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Employee.SR_Shift", b =>
                {
                    b.Property<int>("idShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idShift"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idShift");

                    b.ToTable("SR_Shift");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Employee.SR_TypeEmployee", b =>
                {
                    b.Property<int>("idTypeEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTypeEmployee"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("salary")
                        .HasColumnType("real");

                    b.HasKey("idTypeEmployee");

                    b.ToTable("SRH_TypeEmployee");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Payments.SR_Bill", b =>
                {
                    b.Property<int>("idBill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idBill"));

                    b.Property<float>("Iva")
                        .HasColumnType("real");

                    b.Property<DateTime>("emissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("idBooking")
                        .HasColumnType("int");

                    b.Property<int>("idRecharge")
                        .HasColumnType("int");

                    b.Property<int>("idTypePay")
                        .HasColumnType("int");

                    b.Property<float>("pay")
                        .HasColumnType("real");

                    b.HasKey("idBill");

                    b.HasIndex("idBooking");

                    b.HasIndex("idTypePay");

                    b.ToTable("SRH_Bill");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Payments.SR_Recharge", b =>
                {
                    b.Property<int>("idRecarge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRecarge"));

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idRecarge");

                    b.ToTable("SRH_Recharge");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Payments.SR_TypePay", b =>
                {
                    b.Property<int>("idTypePay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTypePay"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTypePay");

                    b.ToTable("SRH_TypePay");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Users.SR_Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("dateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("idPerson")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("idPerson")
                        .IsUnique();

                    b.ToTable("SRH_Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Users.SR_Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Users.SR_Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Users.SR_Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Users.SR_Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_Binnacle", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Booking.SR_Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("idBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Booking.SR_State", "State")
                        .WithMany()
                        .HasForeignKey("idState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("State");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_Booking", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Customer.SR_Person", "SR_Person")
                        .WithMany()
                        .HasForeignKey("SR_PersonidPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Booking.SR_PeriodBooking", "PeriodBooking")
                        .WithMany()
                        .HasForeignKey("idPeriodBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PeriodBooking");

                    b.Navigation("SR_Person");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_CalendarDetail", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Booking.SR_Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("idBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Booking.SR_Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("idCalendar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_Room", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Booking.SR_CategoryRoom", "CategoryRoom")
                        .WithMany()
                        .HasForeignKey("idCategoryRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryRoom");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Booking.SR_RoomDetail", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Booking.SR_Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("idBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Booking.SR_Room", "Room")
                        .WithMany()
                        .HasForeignKey("idRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_City", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Customer.SR_Country", "Country")
                        .WithMany()
                        .HasForeignKey("idCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_Contacts", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Customer.SR_Person", "Person")
                        .WithMany()
                        .HasForeignKey("idPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_Person", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Customer.SR_City", "City")
                        .WithMany()
                        .HasForeignKey("idCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Customer.SR_Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("idGender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Customer.SR_TypeDocument", "TypeDocument")
                        .WithMany()
                        .HasForeignKey("idTypeDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Customer.SR_TypePerson", "typePerson")
                        .WithMany()
                        .HasForeignKey("idTypePerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("TypeDocument");

                    b.Navigation("typePerson");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Employee.SR_Employee", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Customer.SR_Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("SOH.MAIN.Models.Employee.SR_Employee", "idPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Employee.SR_Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("idShift")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Employee.SR_TypeEmployee", "TypeEmployee")
                        .WithMany()
                        .HasForeignKey("idTypeEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Shift");

                    b.Navigation("TypeEmployee");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Payments.SR_Bill", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Booking.SR_Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("idBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOH.MAIN.Models.Payments.SR_TypePay", "TypePay")
                        .WithMany()
                        .HasForeignKey("idTypePay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("TypePay");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Users.SR_Users", b =>
                {
                    b.HasOne("SOH.MAIN.Models.Customer.SR_Person", "Person")
                        .WithOne("Users")
                        .HasForeignKey("SOH.MAIN.Models.Users.SR_Users", "idPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SOH.MAIN.Models.Customer.SR_Person", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("Users")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
